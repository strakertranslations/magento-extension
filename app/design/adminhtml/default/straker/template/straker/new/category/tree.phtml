<div class="content-header">
    <h3><?php echo $this->__('Create New Job') ?></h3><h3 class="store-info-heading"><?php echo Mage::helper('strakertranslations_easytranslationplatform')->renderNewJobHeading($this->getRequest()->getParam('store')) ?></h3>
</div>
<div class="container">
    <input type="button" class="form-button left" value="Back" title="Back" onclick="window.location.href = '<?php echo $this->getUrl('*/straker_category/new', array('store'=> $this->getSetupStoreId())); ?>'">
</div>
<ol class="wizard" data-wizard-steps="4">
    <li class="wizard-done"><?php echo $this->__('Select Job Type') ?></li>
    <li class="wizard-done"><?php echo $this->__('Select Details') ?></li>
    <li class="wizard-current"><?php echo $this->__('Select Content') ?></li>
    <li class="wizard-todo"><?php echo $this->__('Confirm Content') ?></li>
</ol>
<div class="straker-main-container border">
    <h1><?php echo $this->__('Select Categories') ?></h1>
    <p><?php echo $this->__('Select categories to Translate') ?></p>
    <form method="post" action="<?php echo Mage::helper("adminhtml")->getUrl("adminhtml/straker_category/confirmCategory") ?>" >
        <div style="padding:0; margin-bottom: 30px;">
            <input type="hidden" name="form_key" value="<?php echo Mage::getSingleton('core/session')->getFormKey(); ?>" >
            <input type="hidden" name="store" value="<?php echo $this->getRequest()->getParam('store') ?>" />
            <input type="hidden" name="attr" value="<?php echo $this->getRequest()->getParam('attr')?>" />
            <input type="hidden" name="category" id="product_categories" value="<?php echo $this->getIdsString() ?>" />
            <div id="product-categories" class="tree"></div>
            <div class="clear"></div>
            <input type="submit" class="form-button right" value="Next" title="Next">
        </div>
    </form>
</div>
<script type="text/javascript">
    Ext.EventManager.onDocumentReady(function() {
        var categoryLoader = new Ext.tree.TreeLoader({
            dataUrl: '<?php echo $this->getLoadTreeUrl()?>'
        });

        categoryLoader.createNode = function(config) {
            config.uiProvider = Ext.tree.CheckboxNodeUI;
            var node;
            if (config.children && !config.children.length) {
                delete(config.children);
                node = new Ext.tree.AsyncTreeNode(config);

            } else {
                node = new Ext.tree.TreeNode(config);
            }
            return node;
        };

        categoryLoader.on("beforeload", function(treeLoader, node) {
            treeLoader.baseParams.category = node.attributes.id;
        });

        categoryLoader.on("load", function(treeLoader, node, config) {
            varienWindowOnload();
        });

        var tree = new Ext.tree.TreePanel('product-categories', {
            animate:true,
            loader: categoryLoader,
            enableDD:false,
            containerScroll: true,
            rootUIProvider: Ext.tree.CheckboxNodeUI,
            selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
            rootVisible: '<?php echo $this->getRootNode()->getIsVisible() ?>'
        });

        tree.on('check', function(node) {
            if(node.attributes.checked) {
                categoryAdd(node.id);
                node.childNodes.each(function(c){
                    c.getUI().check(1);
                });
            } else {
                categoryRemove(node.id);
                node.childNodes.each(function(c){
                    c.getUI().check(0);
                });
            }
            varienElementMethods.setHasChanges(node.getUI().checkbox);
        }, tree);

        // set the root node
        var root = new Ext.tree.TreeNode({
            text: '<?php echo $this->jsQuoteEscape($this->getRootNode()->getName()) ?>',
            draggable:false,
            checked:'<?php echo $this->getRootNode()->getChecked() ?>',
            id:'<?php echo $this->getRootNode()->getId() ?>',
            disabled: <?php echo ($this->getRootNode()->getDisabled() ? 'true' : 'false') ?>,
            uiProvider: Ext.tree.CheckboxNodeUI
        });

        tree.setRootNode(root);
        bildCategoryTree(root, <?php echo $this->getTreeJson() ?>);
        tree.addListener('click', categoryClick.createDelegate(this));

        // render the tree
        tree.render();
        root.expand();
        //tree.expandAll();
    });

    function bildCategoryTree(parent, config){
        if (!config) return null;

        if (parent && config && config.length){
            for (var i = 0; i < config.length; i++){
                config[i].uiProvider = Ext.tree.CheckboxNodeUI;
                var node;
                var _node = Object.clone(config[i]);
                if (_node.children && !_node.children.length) {
                    delete(_node.children);
                    node = new Ext.tree.AsyncTreeNode(_node);

                } else {
                    node = new Ext.tree.TreeNode(config[i]);
                }
                parent.appendChild(node);
                node.loader = node.getOwnerTree().loader;
                if(config[i].children){
                    bildCategoryTree(node, config[i].children);
                }
            }
        }
    }

    function categoryClick(node, e){
        if (node.disabled) {
            return;
        }
        node.getUI().check(!node.getUI().checked());
        if(node.getUI().checked()){
            node.childNodes.each(function(c){
                c.getUI().check(1);
            });
        }
        varienElementMethods.setHasChanges(Event.element(e), e);
    };
    function categoryAdd(id) {
        var ids = $('product_categories').value.split(',');
        ids.push(id);
        $('product_categories').value = ids.join(',');
    }
    function categoryRemove(id) {
        var ids = $('product_categories').value.split(',');
        // bug #7654 fixed
        while (-1 != ids.indexOf(id)) {
            ids.splice(ids.indexOf(id), 1);
        }
        $('product_categories').value = ids.join(',');
    }
</script>