<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2006-2015 X.commerce, Inc. (http://www.magento.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<div id="<?php echo $this->getHtmlId() ?>">
    <table cellspacing="0" cellpadding="0" class="massaction">
        <tr>
            <td>
                <div id="massaction-attribute-label-wrapper">
                    <?php if ($this->getUseSelectAll()):?>
                        <a href="#" onclick="return <?php echo $this->getJsObjectName() ?>.selectAll()"><?php echo $this->__('Select All') ?></a>
                        <span class="separator">|</span>
                        <a href="#" onclick="return <?php echo $this->getJsObjectName() ?>.unselectAll()"><?php echo $this->__('Unselect All') ?></a>
                        <span class="separator">|</span>
                    <?php endif; ?>
                    <a href="#" onclick="return <?php echo $this->getJsObjectName() ?>.selectVisible()"><?php echo $this->__('Select Visible') ?></a>
                    <span class="separator">|</span>
                    <a href="#" onclick="return <?php echo $this->getJsObjectName() ?>.unselectVisible()"><?php echo $this->__('Unselect Visible') ?></a>
                    <span class="separator">|</span><br />
                    <strong id="<?php echo $this->getHtmlId() ?>-count">0</strong> <?php echo $this->__('items selected') ?>
                </div>
                <div id="massaction-attribute-option-wrapper">
                    <?php if ($this->getUseSelectAll()):?>
                        <a href="#" onclick="selectAllMassActionOptions()"><?php echo $this->__('Select All') ?></a>
                        <span class="separator">|</span>
                        <a href="#" onclick="unselectAllMassActionOptions()"><?php echo $this->__('Unselect All') ?></a>
                        <span class="separator">|</span>
                    <?php endif; ?>
                    <a href="#" onclick="selectVisibleMassActionOptions()"><?php echo $this->__('Select Visible') ?></a>
                    <span class="separator">|</span>
                    <a href="#" onclick="unselectVisibleMassActionOptions()"><?php echo $this->__('Unselect Visible') ?></a>
                    <span class="separator">|</span><br />
                    <strong id="mass-action-options-count">0</strong> <?php echo $this->__('items selected') ?>
                </div>
            </td>
            <td>
                <div class="right">
                    <div class="entry-edit">
                        <?php if ($this->getHideFormElement() !== true):?>
                        <form action="" id="<?php echo $this->getHtmlId() ?>-form" method="post">
                            <?php endif ?>
                            <?php echo $this->getBlockHtml('formkey')?>
                            <?php echo $this->getHiddenParams() ?>
                            <fieldset>
                        <span class="field-row">
                            <label><?php echo $this->__('Actions') ?></label>
                            <select id="<?php echo $this->getHtmlId() ?>-select" class="required-entry select absolute-advice local-validation">
                                <option value=""></option>
                                <?php foreach($this->getItems() as $_item): ?>
                                    <option value="<?php echo $_item->getId() ?>"<?php echo ($_item->getSelected() ? ' selected="selected"' : '')?>><?php echo $_item->getLabel() ?></option>
                                <?php endforeach; ?>
                            </select>
                        </span>
                                <span class="outer-span" id="<?php echo $this->getHtmlId() ?>-form-hiddens"></span>
                                <span class="outer-span" id="<?php echo $this->getHtmlId() ?>-form-additional"></span>
                        <span class="field-row">
                            <?php echo $this->getApplyButtonHtml() ?>
                        </span>
                            </fieldset>
                            <?php if ($this->getHideFormElement() !== true):?>
                        </form>
                    <?php endif ?>
                    </div>

                    <div class="no-display">
                        <?php foreach($this->getItems() as $_item): ?>
                            <div id="<?php echo $this->getHtmlId() ?>-item-<?php echo $_item->getId() ?>-block">
                                <?php echo $_item->getAdditionalActionBlockHtml() ?>
                            </div>
                        <?php endforeach; ?>
                    </div>
                </div>
            </td>
        </tr>
    </table>
    <?php if(!$this->getParentBlock()->canDisplayContainer()): ?>
        <script type="text/javascript">
            <?php echo $this->getJsObjectName() ?>.setGridIds('<?php echo $this->getGridIdsJson() ?>');
        </script>
    <?php endif; ?>
    <script>
        <?php //JS to control attribute option checkboxes ?>
        var allAttributesWithOptions = <?php echo json_encode( $this->getParentBlock()->getAttributesWithOption() ) ?>;
        selectAllMassActionOptions = function(){
            $$('.checkbox-option').each(function(checkbox) {
                if(allAttributesWithOptions.indexOf(checkbox.value) !== -1){
                    checkbox.checked = 1
                }
            });
            $$('#attributeGrid_massaction-form input[name=option]')[0].value = allAttributesWithOptions;
            $('mass-action-options-count').update(allAttributesWithOptions.length);
        };
        unselectAllMassActionOptions = function(){
            $$('.checkbox-option').each(function(checkbox) {
                if(allAttributesWithOptions.indexOf(checkbox.value) !== -1){
                    checkbox.checked = 0;
                }
            });
            $$('#attributeGrid_massaction-form input[name=option]')[0].value = '';
            $('mass-action-options-count').update(0);
        };
        selectVisibleMassActionOptions = function(){

            var optionArray = $$('#attributeGrid_massaction-form input[name=option]')[0].value === '' ? [] : $$('#attributeGrid_massaction-form input[name=option]')[0].value.split(',');

            $$('.checkbox-option').each(function(checkbox) {
                if(optionArray.indexOf(checkbox.value) === -1){
                    optionArray.push(checkbox.value);
                    checkbox.checked = 1;
                }
            });
            $$('#attributeGrid_massaction-form input[name=option]')[0].value = optionArray;
            $('mass-action-options-count').update(optionArray.length);
        };
        unselectVisibleMassActionOptions = function(){
            var optionArray = $$('#attributeGrid_massaction-form input[name=option]')[0].value.split(',');

            $$('.checkbox-option').each(function(checkbox) {
                if(optionArray.indexOf(checkbox.value) !== -1){
                    optionArray.splice(optionArray.indexOf(checkbox.value), 1);
                    checkbox.checked = 0;
                }
            });
            if (optionArray == ""){
                $$('#attributeGrid_massaction-form input[name=option]')[0].value = '';
                $('mass-action-options-count').update(0);
            }
            else {
                $$('#attributeGrid_massaction-form input[name=option]')[0].value = optionArray;
                $('mass-action-options-count').update(optionArray.length);
            }
        };

        document.observe("dom:loaded", function() {
            $$('#attributeGrid_table tr.filter th:nth(1)')[0].update($('massaction-attribute-label-wrapper'));
            $$('#attributeGrid_table tr.filter th:nth(3)')[0].update($('massaction-attribute-option-wrapper'));
            $$('.checkbox-option').each(function(element) {
                element.observe('click', function(e){
                    var optionArray = $$('#attributeGrid_massaction-form input[name=option]')[0].value === '' ? [] : $$('#attributeGrid_massaction-form input[name=option]')[0].value.split(',');

                    if(this.checked && optionArray.indexOf(this.value) === -1){
                        optionArray.push(this.value);
                        this.checked = 1;
                    }
                    else if(!this.checked && optionArray.indexOf(this.value) !== -1){
                        optionArray.splice(optionArray.indexOf(this.value), 1);
                        this.checked = 0;
                    }
                    if (optionArray == ""){
                        $$('#attributeGrid_massaction-form input[name=option]')[0].value = '';
                        $('mass-action-options-count').update(0);

                    }
                    else {
                        $$('#attributeGrid_massaction-form input[name=option]')[0].value = optionArray;
                        $('mass-action-options-count').update(optionArray.length);
                    }
                });
            });


            var initOptionArray = $$('#attributeGrid_massaction-form input[name=option]')[0].value === '' ? [] : $$('#attributeGrid_massaction-form input[name=option]')[0].value.split(',');
            $$('.checkbox-option').each(function(checkbox) {
                if(initOptionArray.indexOf(checkbox.value) !== -1){
                    checkbox.checked = 1;
                }
                else{
                    checkbox.checked = 0;
                }
            });
            $('mass-action-options-count').update(initOptionArray.length);

            $$('.massaction-checkbox').each(function(element) {
                element.observe('click', function(e){
                    if( typeof(e.target.up('tr').down('.checkbox-option')) !== 'undefined' &&
                        (
                            (e.target.checked && !e.target.up('tr').down('.checkbox-option').checked)||
                            (!e.target.checked && e.target.up('tr').down('.checkbox-option').checked)
                        )
                    ) {
                        e.target.up('tr').down('.checkbox-option').click();
                    }
                });
            });

            $$('.checkbox-option').each(function(element) {
                element.observe('click', function(e){
                    if(e.target.checked && !e.target.up('tr').down('.massaction-checkbox').checked){
                        e.target.up('tr').down('.massaction-checkbox').click();
                    }
                });
            });

        });

        varienGrid.prototype.rowMouseClick = function(){
            if(event.element().matches('input[type=checkbox]') && this.rowClickCallback){
                try{
                    this.rowClickCallback(this, event);
                }
                catch(e){}
            }
            varienGlobalEvents.fireEvent('gridRowClick', event);
        };
        varienGrid.prototype.setPage = function(pageNumber){
            this.addVarToUrl('internal_option', $$('#attributeGrid_massaction-form input[name=option]')[0].value)
            this.reload(this.addVarToUrl(this.pageVar, pageNumber));
        };

        varienGrid.prototype.addVarToUrl  = function(varName, varValue){
            this.url = this._addVarToUrl(this.url, varName, varValue);
            return this.url;
        }

        varienGridMassaction.prototype.apply = function() {
            if(varienStringArray.count(this.checkedString) == 0 && varienStringArray.count($$('#attributeGrid_massaction-form input[name=option]')[0].value) == 0) {
                alert(this.errorText);
                return;
            }

            var item = this.getSelectedItem();
            if(!item) {
                this.validator.validate();
                return;
            }
            this.currentItem = item;
            var fieldName = (item.field ? item.field : this.formFieldName);
            var fieldsHtml = '';

            if(this.currentItem.confirm && !window.confirm(this.currentItem.confirm)) {
                return;
            }

            this.formHiddens.update('');
            new Insertion.Bottom(this.formHiddens, this.fieldTemplate.evaluate({name: fieldName, value: this.checkedString}));
            new Insertion.Bottom(this.formHiddens, this.fieldTemplate.evaluate({name: 'massaction_prepare_key', value: fieldName}));

            if(!this.validator.validate()) {
                return;
            }

            if(this.useAjax && item.url) {
                new Ajax.Request(item.url, {
                    'method': 'post',
                    'parameters': this.form.serialize(true),
                    'onComplete': this.onMassactionComplete.bind(this)
                });
            } else if(item.url) {
                this.form.action = item.url;
                this.form.submit();
            }
        }
    </script>
</div>
